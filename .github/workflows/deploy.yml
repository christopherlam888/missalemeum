name: Deploy Docker image

on:
  push:
    tags:
      - '*'

env:
  REGISTRY: ghcr.io

jobs:
  push-images:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - image: "backend"
            dockerfile: "backend/Dockerfile"
          - image: "frontend"
            dockerfile: "frontend/Dockerfile"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ matrix.image }}

      - name: Build and push Docker images
        uses: docker/build-push-action@v6
        with:
          context: ${{ matrix.image }}
          file: ${{ matrix.dockerfile }}
          push: true
          build-args: |
            NEXT_PUBLIC_BUILD_VERSION=${{ github.ref_name }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-images:
    needs: push-images
    runs-on: ubuntu-latest
    steps:
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/prod.key
          chmod 600 ~/.ssh/prod.key
          cat >>~/.ssh/config <<END
          Host prod
            HostName $SSH_HOST
            User $SSH_USER
            Port $SSH_PORT
            IdentityFile ~/.ssh/prod.key
            StrictHostKeyChecking no
          END
        env:
          SSH_USER: ${{ vars.DEPLOY_USER }}
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_HOST: ${{ vars.DEPLOY_HOST }}
          SSH_PORT: ${{ vars.DEPLOY_PORT }}
      - name: pull and start new containers
        run: ssh prod 'cd missalemeum && docker-compose -f docker-compose.prod.yaml pull && docker-compose -f docker-compose.prod.yaml up -d'

  purge-cache:
    needs: deploy-images
    runs-on: ubuntu-latest
    steps:
      - name: Purge Cloudflare cache
        # if: github.event_name == 'release'
        uses: fjogeleit/http-request-action@v1
        with:
          url: https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE }}/purge_cache
          method: POST
          customHeaders: '{"Content-Type": "application/json"}'
          bearerToken: ${{ secrets.CLOUDFLARE_TOKEN }}
          data: '{"purge_everything": true}'
